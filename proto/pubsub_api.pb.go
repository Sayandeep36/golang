//
// Salesforce Pub/Sub API Version 1.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.2
// source: proto/pubsub_api.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported error codes
type ErrorCode int32

const (
	ErrorCode_UNKNOWN ErrorCode = 0
	ErrorCode_PUBLISH ErrorCode = 1
	// ErrorCode for unrecoverable commit errors.
	ErrorCode_COMMIT ErrorCode = 2
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "UNKNOWN",
		1: "PUBLISH",
		2: "COMMIT",
	}
	ErrorCode_value = map[string]int32{
		"UNKNOWN": 0,
		"PUBLISH": 1,
		"COMMIT":  2,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pubsub_api_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_proto_pubsub_api_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{0}
}

// Supported subscription replay start values.
// By default, the subscription will start at the tip of the stream if ReplayPreset is not specified.
type ReplayPreset int32

const (
	// Start the subscription at the tip of the stream.
	ReplayPreset_LATEST ReplayPreset = 0
	// Start the subscription at the earliest point in the stream.
	ReplayPreset_EARLIEST ReplayPreset = 1
	// Start the subscription after a custom point in the stream. This must be set with a valid replay_id in the FetchRequest.
	ReplayPreset_CUSTOM ReplayPreset = 2
)

// Enum value maps for ReplayPreset.
var (
	ReplayPreset_name = map[int32]string{
		0: "LATEST",
		1: "EARLIEST",
		2: "CUSTOM",
	}
	ReplayPreset_value = map[string]int32{
		"LATEST":   0,
		"EARLIEST": 1,
		"CUSTOM":   2,
	}
)

func (x ReplayPreset) Enum() *ReplayPreset {
	p := new(ReplayPreset)
	*p = x
	return p
}

func (x ReplayPreset) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplayPreset) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pubsub_api_proto_enumTypes[1].Descriptor()
}

func (ReplayPreset) Type() protoreflect.EnumType {
	return &file_proto_pubsub_api_proto_enumTypes[1]
}

func (x ReplayPreset) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplayPreset.Descriptor instead.
func (ReplayPreset) EnumDescriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{1}
}

// Contains information about a topic and uniquely identifies it. TopicInfo is returned by the GetTopic RPC method.
type TopicInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Topic name
	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	// Tenant/org GUID
	TenantGuid string `protobuf:"bytes,2,opt,name=tenant_guid,json=tenantGuid,proto3" json:"tenant_guid,omitempty"`
	// Is publishing allowed?
	CanPublish bool `protobuf:"varint,3,opt,name=can_publish,json=canPublish,proto3" json:"can_publish,omitempty"`
	// Is subscription allowed?
	CanSubscribe bool `protobuf:"varint,4,opt,name=can_subscribe,json=canSubscribe,proto3" json:"can_subscribe,omitempty"`
	// ID of the current topic schema, which can be used for
	// publishing of generically serialized events.
	SchemaId string `protobuf:"bytes,5,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	// RPC ID used to trace errors.
	RpcId         string `protobuf:"bytes,6,opt,name=rpc_id,json=rpcId,proto3" json:"rpc_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopicInfo) Reset() {
	*x = TopicInfo{}
	mi := &file_proto_pubsub_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicInfo) ProtoMessage() {}

func (x *TopicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicInfo.ProtoReflect.Descriptor instead.
func (*TopicInfo) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{0}
}

func (x *TopicInfo) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *TopicInfo) GetTenantGuid() string {
	if x != nil {
		return x.TenantGuid
	}
	return ""
}

func (x *TopicInfo) GetCanPublish() bool {
	if x != nil {
		return x.CanPublish
	}
	return false
}

func (x *TopicInfo) GetCanSubscribe() bool {
	if x != nil {
		return x.CanSubscribe
	}
	return false
}

func (x *TopicInfo) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *TopicInfo) GetRpcId() string {
	if x != nil {
		return x.RpcId
	}
	return ""
}

// A request message for GetTopic. Note that the tenant/org is not directly referenced
// in the request, but is implicitly identified by the authentication headers.
type TopicRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the topic to retrieve.
	TopicName     string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopicRequest) Reset() {
	*x = TopicRequest{}
	mi := &file_proto_pubsub_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicRequest) ProtoMessage() {}

func (x *TopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicRequest.ProtoReflect.Descriptor instead.
func (*TopicRequest) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{1}
}

func (x *TopicRequest) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

// Reserved for future use.
// Header that contains information for distributed tracing, filtering, routing, etc.
// For example, X-B3-* headers assigned by a publisher are stored with the event and
// can provide a full distributed trace of the event across its entire lifecycle.
type EventHeader struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventHeader) Reset() {
	*x = EventHeader{}
	mi := &file_proto_pubsub_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventHeader) ProtoMessage() {}

func (x *EventHeader) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventHeader.ProtoReflect.Descriptor instead.
func (*EventHeader) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{2}
}

func (x *EventHeader) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EventHeader) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Represents an event that an event publishing app creates.
type ProducerEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Either a user-provided ID or a system generated guid
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Schema fingerprint for this event which is hash of the schema
	SchemaId string `protobuf:"bytes,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	// The message data field
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// Reserved for future use. Key-value pairs of headers.
	Headers       []*EventHeader `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProducerEvent) Reset() {
	*x = ProducerEvent{}
	mi := &file_proto_pubsub_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProducerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerEvent) ProtoMessage() {}

func (x *ProducerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerEvent.ProtoReflect.Descriptor instead.
func (*ProducerEvent) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{3}
}

func (x *ProducerEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProducerEvent) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *ProducerEvent) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ProducerEvent) GetHeaders() []*EventHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

// Represents an event that is consumed in a subscriber client.
// In addition to the fields in ProducerEvent, ConsumerEvent has the replay_id field.
type ConsumerEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The event with fields identical to ProducerEvent
	Event *ProducerEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	// The replay ID of the event.
	// A subscriber app can store the replay ID. When the app restarts, it can resume subscription
	// starting from events in the event bus after the event with that replay ID.
	ReplayId      []byte `protobuf:"bytes,2,opt,name=replay_id,json=replayId,proto3" json:"replay_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsumerEvent) Reset() {
	*x = ConsumerEvent{}
	mi := &file_proto_pubsub_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerEvent) ProtoMessage() {}

func (x *ConsumerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerEvent.ProtoReflect.Descriptor instead.
func (*ConsumerEvent) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{4}
}

func (x *ConsumerEvent) GetEvent() *ProducerEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ConsumerEvent) GetReplayId() []byte {
	if x != nil {
		return x.ReplayId
	}
	return nil
}

// Event publish result that the Publish RPC method returns. The result contains replay_id or a publish error.
type PublishResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Replay ID of the event
	ReplayId []byte `protobuf:"bytes,1,opt,name=replay_id,json=replayId,proto3" json:"replay_id,omitempty"`
	// Publish error if any
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Correlation key of the ProducerEvent
	CorrelationKey string `protobuf:"bytes,3,opt,name=correlation_key,json=correlationKey,proto3" json:"correlation_key,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PublishResult) Reset() {
	*x = PublishResult{}
	mi := &file_proto_pubsub_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishResult) ProtoMessage() {}

func (x *PublishResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishResult.ProtoReflect.Descriptor instead.
func (*PublishResult) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{5}
}

func (x *PublishResult) GetReplayId() []byte {
	if x != nil {
		return x.ReplayId
	}
	return nil
}

func (x *PublishResult) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PublishResult) GetCorrelationKey() string {
	if x != nil {
		return x.CorrelationKey
	}
	return ""
}

// Contains error information for an error that an RPC method returns.
type Error struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error code
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=eventbus.v1.ErrorCode" json:"code,omitempty"`
	// Error message
	Msg           string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_proto_pubsub_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{6}
}

func (x *Error) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_UNKNOWN
}

func (x *Error) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// Request for the Subscribe streaming RPC method. This request is used to:
// 1. Establish the initial subscribe stream.
// 2. Request more events from the subscription stream.
// Flow Control is handled by the subscriber via num_requested.
// A client can specify a starting point for the subscription with replay_preset and replay_id combinations.
// If no replay_preset is specified, the subscription starts at LATEST (tip of the stream).
// replay_preset and replay_id values are only consumed as part of the first FetchRequest. If
// a client needs to start at another point in the stream, it must start a new subscription.
type FetchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifies a topic for subscription in the very first FetchRequest of the stream. The topic cannot change
	// in subsequent FetchRequests within the same subscribe stream, but can be omitted for efficiency.
	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	// Subscription starting point. This is consumed only as part of the first FetchRequest
	// when the subscription is set up.
	ReplayPreset ReplayPreset `protobuf:"varint,2,opt,name=replay_preset,json=replayPreset,proto3,enum=eventbus.v1.ReplayPreset" json:"replay_preset,omitempty"`
	// If replay_preset of CUSTOM is selected, specify the subscription point to start after.
	// This is consumed only as part of the first FetchRequest when the subscription is set up.
	ReplayId []byte `protobuf:"bytes,3,opt,name=replay_id,json=replayId,proto3" json:"replay_id,omitempty"`
	// Number of events a client is ready to accept. Each subsequent FetchRequest informs the server
	// of additional processing capacity available on the client side. There is no guarantee of equal number of
	// FetchResponse messages to be sent back. There is not necessarily a correspondence between
	// number of requested events in FetchRequest and the number of events returned in subsequent
	// FetchResponses.
	NumRequested int32 `protobuf:"varint,4,opt,name=num_requested,json=numRequested,proto3" json:"num_requested,omitempty"`
	// For internal Salesforce use only.
	AuthRefresh   string `protobuf:"bytes,5,opt,name=auth_refresh,json=authRefresh,proto3" json:"auth_refresh,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchRequest) Reset() {
	*x = FetchRequest{}
	mi := &file_proto_pubsub_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRequest) ProtoMessage() {}

func (x *FetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRequest.ProtoReflect.Descriptor instead.
func (*FetchRequest) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{7}
}

func (x *FetchRequest) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *FetchRequest) GetReplayPreset() ReplayPreset {
	if x != nil {
		return x.ReplayPreset
	}
	return ReplayPreset_LATEST
}

func (x *FetchRequest) GetReplayId() []byte {
	if x != nil {
		return x.ReplayId
	}
	return nil
}

func (x *FetchRequest) GetNumRequested() int32 {
	if x != nil {
		return x.NumRequested
	}
	return 0
}

func (x *FetchRequest) GetAuthRefresh() string {
	if x != nil {
		return x.AuthRefresh
	}
	return ""
}

// Response for the Subscribe streaming RPC method. This returns ConsumerEvent(s).
// If there are no events to deliver, the server sends an empty batch fetch response with the latest replay ID. The
// empty fetch response is sent within 270 seconds. An empty fetch response provides a periodic keepalive from the
// server and the latest replay ID.
type FetchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Received events for subscription for client consumption
	Events []*ConsumerEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	// Latest replay ID of a subscription. Enables clients with an updated replay value so that they can keep track
	// of their last consumed replay. Clients will not have to start a subscription at a very old replay in the case where a resubscribe is necessary.
	LatestReplayId []byte `protobuf:"bytes,2,opt,name=latest_replay_id,json=latestReplayId,proto3" json:"latest_replay_id,omitempty"`
	// RPC ID used to trace errors.
	RpcId string `protobuf:"bytes,3,opt,name=rpc_id,json=rpcId,proto3" json:"rpc_id,omitempty"`
	// Number of remaining events to be delivered to the client for a Subscribe RPC call.
	PendingNumRequested int32 `protobuf:"varint,4,opt,name=pending_num_requested,json=pendingNumRequested,proto3" json:"pending_num_requested,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FetchResponse) Reset() {
	*x = FetchResponse{}
	mi := &file_proto_pubsub_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchResponse) ProtoMessage() {}

func (x *FetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchResponse.ProtoReflect.Descriptor instead.
func (*FetchResponse) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{8}
}

func (x *FetchResponse) GetEvents() []*ConsumerEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *FetchResponse) GetLatestReplayId() []byte {
	if x != nil {
		return x.LatestReplayId
	}
	return nil
}

func (x *FetchResponse) GetRpcId() string {
	if x != nil {
		return x.RpcId
	}
	return ""
}

func (x *FetchResponse) GetPendingNumRequested() int32 {
	if x != nil {
		return x.PendingNumRequested
	}
	return 0
}

// Request for the GetSchema RPC method. The schema request is based on the event schema ID.
type SchemaRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Schema fingerprint for this event, which is a hash of the schema.
	SchemaId      string `protobuf:"bytes,1,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaRequest) Reset() {
	*x = SchemaRequest{}
	mi := &file_proto_pubsub_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaRequest) ProtoMessage() {}

func (x *SchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaRequest.ProtoReflect.Descriptor instead.
func (*SchemaRequest) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{9}
}

func (x *SchemaRequest) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

// Response for the GetSchema RPC method. This returns the schema ID and schema of an event.
type SchemaInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Avro schema in JSON format
	SchemaJson string `protobuf:"bytes,1,opt,name=schema_json,json=schemaJson,proto3" json:"schema_json,omitempty"`
	// Schema fingerprint
	SchemaId string `protobuf:"bytes,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	// RPC ID used to trace errors.
	RpcId         string `protobuf:"bytes,3,opt,name=rpc_id,json=rpcId,proto3" json:"rpc_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaInfo) Reset() {
	*x = SchemaInfo{}
	mi := &file_proto_pubsub_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaInfo) ProtoMessage() {}

func (x *SchemaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaInfo.ProtoReflect.Descriptor instead.
func (*SchemaInfo) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{10}
}

func (x *SchemaInfo) GetSchemaJson() string {
	if x != nil {
		return x.SchemaJson
	}
	return ""
}

func (x *SchemaInfo) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *SchemaInfo) GetRpcId() string {
	if x != nil {
		return x.RpcId
	}
	return ""
}

// Request for the Publish and PublishStream RPC method.
type PublishRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Topic to publish on
	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	// Batch of ProducerEvent(s) to send
	Events []*ProducerEvent `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	// For internal Salesforce use only.
	AuthRefresh   string `protobuf:"bytes,3,opt,name=auth_refresh,json=authRefresh,proto3" json:"auth_refresh,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishRequest) Reset() {
	*x = PublishRequest{}
	mi := &file_proto_pubsub_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRequest) ProtoMessage() {}

func (x *PublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRequest.ProtoReflect.Descriptor instead.
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{11}
}

func (x *PublishRequest) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *PublishRequest) GetEvents() []*ProducerEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *PublishRequest) GetAuthRefresh() string {
	if x != nil {
		return x.AuthRefresh
	}
	return ""
}

// Response for the Publish and PublishStream RPC methods. This returns
// a list of PublishResults for each event that the client attempted to
// publish. PublishResult indicates if publish succeeded or not
// for each event. It also returns the schema ID that was used to create
// the ProducerEvents in the PublishRequest.
type PublishResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Publish results
	Results []*PublishResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	// Schema fingerprint for this event, which is a hash of the schema
	SchemaId string `protobuf:"bytes,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	// RPC ID used to trace errors.
	RpcId         string `protobuf:"bytes,3,opt,name=rpc_id,json=rpcId,proto3" json:"rpc_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishResponse) Reset() {
	*x = PublishResponse{}
	mi := &file_proto_pubsub_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishResponse) ProtoMessage() {}

func (x *PublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishResponse.ProtoReflect.Descriptor instead.
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{12}
}

func (x *PublishResponse) GetResults() []*PublishResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *PublishResponse) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *PublishResponse) GetRpcId() string {
	if x != nil {
		return x.RpcId
	}
	return ""
}

// This feature is part of an open beta release and is subject to the applicable
// Beta Services Terms provided at Agreements and Terms
// (https://www.salesforce.com/company/legal/agreements/).
//
// Request for the ManagedSubscribe streaming RPC method. This request is used to:
// 1. Establish the initial managed subscribe stream.
// 2. Request more events from the subscription stream.
// 3. Commit a Replay ID using CommitReplayRequest.
type ManagedFetchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Managed subscription ID or developer name. This value corresponds to the
	// ID or developer name of the ManagedEventSubscription Tooling API record.
	// This value is consumed as part of the first ManagedFetchRequest only.
	// The subscription_id cannot change in subsequent ManagedFetchRequests
	// within the same subscribe stream, but can be omitted for efficiency.
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	DeveloperName  string `protobuf:"bytes,2,opt,name=developer_name,json=developerName,proto3" json:"developer_name,omitempty"`
	// Number of events a client is ready to accept. Each subsequent FetchRequest informs the server
	// of additional processing capacity available on the client side. There is no guarantee of equal number of
	// FetchResponse messages to be sent back. There is not necessarily a correspondence between
	// number of requested events in FetchRequest and the number of events returned in subsequent
	// FetchResponses.
	NumRequested int32 `protobuf:"varint,3,opt,name=num_requested,json=numRequested,proto3" json:"num_requested,omitempty"`
	// For internal Salesforce use only.
	AuthRefresh           string               `protobuf:"bytes,4,opt,name=auth_refresh,json=authRefresh,proto3" json:"auth_refresh,omitempty"`
	CommitReplayIdRequest *CommitReplayRequest `protobuf:"bytes,5,opt,name=commit_replay_id_request,json=commitReplayIdRequest,proto3" json:"commit_replay_id_request,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ManagedFetchRequest) Reset() {
	*x = ManagedFetchRequest{}
	mi := &file_proto_pubsub_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagedFetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedFetchRequest) ProtoMessage() {}

func (x *ManagedFetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedFetchRequest.ProtoReflect.Descriptor instead.
func (*ManagedFetchRequest) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{13}
}

func (x *ManagedFetchRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *ManagedFetchRequest) GetDeveloperName() string {
	if x != nil {
		return x.DeveloperName
	}
	return ""
}

func (x *ManagedFetchRequest) GetNumRequested() int32 {
	if x != nil {
		return x.NumRequested
	}
	return 0
}

func (x *ManagedFetchRequest) GetAuthRefresh() string {
	if x != nil {
		return x.AuthRefresh
	}
	return ""
}

func (x *ManagedFetchRequest) GetCommitReplayIdRequest() *CommitReplayRequest {
	if x != nil {
		return x.CommitReplayIdRequest
	}
	return nil
}

// This feature is part of an open beta release and is subject to the applicable
// Beta Services Terms provided at Agreements and Terms
// (https://www.salesforce.com/company/legal/agreements/).
//
// Response for the ManagedSubscribe streaming RPC method. This can return
// ConsumerEvent(s) or CommitReplayResponse along with other metadata.
type ManagedFetchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Received events for subscription for client consumption
	Events []*ConsumerEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	// Latest replay ID of a subscription.
	LatestReplayId []byte `protobuf:"bytes,2,opt,name=latest_replay_id,json=latestReplayId,proto3" json:"latest_replay_id,omitempty"`
	// RPC ID used to trace errors.
	RpcId string `protobuf:"bytes,3,opt,name=rpc_id,json=rpcId,proto3" json:"rpc_id,omitempty"`
	// Number of remaining events to be delivered to the client for a Subscribe RPC call.
	PendingNumRequested int32 `protobuf:"varint,4,opt,name=pending_num_requested,json=pendingNumRequested,proto3" json:"pending_num_requested,omitempty"`
	// commit response
	CommitResponse *CommitReplayResponse `protobuf:"bytes,5,opt,name=commit_response,json=commitResponse,proto3" json:"commit_response,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ManagedFetchResponse) Reset() {
	*x = ManagedFetchResponse{}
	mi := &file_proto_pubsub_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagedFetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedFetchResponse) ProtoMessage() {}

func (x *ManagedFetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedFetchResponse.ProtoReflect.Descriptor instead.
func (*ManagedFetchResponse) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{14}
}

func (x *ManagedFetchResponse) GetEvents() []*ConsumerEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ManagedFetchResponse) GetLatestReplayId() []byte {
	if x != nil {
		return x.LatestReplayId
	}
	return nil
}

func (x *ManagedFetchResponse) GetRpcId() string {
	if x != nil {
		return x.RpcId
	}
	return ""
}

func (x *ManagedFetchResponse) GetPendingNumRequested() int32 {
	if x != nil {
		return x.PendingNumRequested
	}
	return 0
}

func (x *ManagedFetchResponse) GetCommitResponse() *CommitReplayResponse {
	if x != nil {
		return x.CommitResponse
	}
	return nil
}

// This feature is part of an open beta release and is subject to the applicable
// Beta Services Terms provided at Agreements and Terms
// (https://www.salesforce.com/company/legal/agreements/).
//
// Request to commit a Replay ID for the last processed event or for the latest
// replay ID received in an empty batch of events.
type CommitReplayRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// commit_request_id to identify commit responses
	CommitRequestId string `protobuf:"bytes,1,opt,name=commit_request_id,json=commitRequestId,proto3" json:"commit_request_id,omitempty"`
	// replayId to commit
	ReplayId      []byte `protobuf:"bytes,2,opt,name=replay_id,json=replayId,proto3" json:"replay_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitReplayRequest) Reset() {
	*x = CommitReplayRequest{}
	mi := &file_proto_pubsub_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitReplayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitReplayRequest) ProtoMessage() {}

func (x *CommitReplayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitReplayRequest.ProtoReflect.Descriptor instead.
func (*CommitReplayRequest) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{15}
}

func (x *CommitReplayRequest) GetCommitRequestId() string {
	if x != nil {
		return x.CommitRequestId
	}
	return ""
}

func (x *CommitReplayRequest) GetReplayId() []byte {
	if x != nil {
		return x.ReplayId
	}
	return nil
}

// This feature is part of an open beta release and is subject to the applicable
// Beta Services Terms provided at Agreements and Terms
// (https://www.salesforce.com/company/legal/agreements/).
//
// There is no guaranteed 1:1 CommitReplayRequest to CommitReplayResponse.
// N CommitReplayRequest(s) can get compressed in a batch resulting in a single
// CommitReplayResponse which reflects the latest values of last
// CommitReplayRequest in that batch.
type CommitReplayResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// commit_request_id to identify commit responses.
	CommitRequestId string `protobuf:"bytes,1,opt,name=commit_request_id,json=commitRequestId,proto3" json:"commit_request_id,omitempty"`
	// replayId that may have been committed
	ReplayId []byte `protobuf:"bytes,2,opt,name=replay_id,json=replayId,proto3" json:"replay_id,omitempty"`
	// for failed commits
	Error *Error `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// time when server received request in epoch ms
	ProcessTime   int64 `protobuf:"varint,4,opt,name=process_time,json=processTime,proto3" json:"process_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitReplayResponse) Reset() {
	*x = CommitReplayResponse{}
	mi := &file_proto_pubsub_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitReplayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitReplayResponse) ProtoMessage() {}

func (x *CommitReplayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitReplayResponse.ProtoReflect.Descriptor instead.
func (*CommitReplayResponse) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_api_proto_rawDescGZIP(), []int{16}
}

func (x *CommitReplayResponse) GetCommitRequestId() string {
	if x != nil {
		return x.CommitRequestId
	}
	return ""
}

func (x *CommitReplayResponse) GetReplayId() []byte {
	if x != nil {
		return x.ReplayId
	}
	return nil
}

func (x *CommitReplayResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CommitReplayResponse) GetProcessTime() int64 {
	if x != nil {
		return x.ProcessTime
	}
	return 0
}

var File_proto_pubsub_api_proto protoreflect.FileDescriptor

const file_proto_pubsub_api_proto_rawDesc = "" +
	"\n" +
	"\x16proto/pubsub_api.proto\x12\veventbus.v1\"\xc5\x01\n" +
	"\tTopicInfo\x12\x1d\n" +
	"\n" +
	"topic_name\x18\x01 \x01(\tR\ttopicName\x12\x1f\n" +
	"\vtenant_guid\x18\x02 \x01(\tR\n" +
	"tenantGuid\x12\x1f\n" +
	"\vcan_publish\x18\x03 \x01(\bR\n" +
	"canPublish\x12#\n" +
	"\rcan_subscribe\x18\x04 \x01(\bR\fcanSubscribe\x12\x1b\n" +
	"\tschema_id\x18\x05 \x01(\tR\bschemaId\x12\x15\n" +
	"\x06rpc_id\x18\x06 \x01(\tR\x05rpcId\"-\n" +
	"\fTopicRequest\x12\x1d\n" +
	"\n" +
	"topic_name\x18\x01 \x01(\tR\ttopicName\"5\n" +
	"\vEventHeader\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value\"\x8a\x01\n" +
	"\rProducerEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tschema_id\x18\x02 \x01(\tR\bschemaId\x12\x18\n" +
	"\apayload\x18\x03 \x01(\fR\apayload\x122\n" +
	"\aheaders\x18\x04 \x03(\v2\x18.eventbus.v1.EventHeaderR\aheaders\"^\n" +
	"\rConsumerEvent\x120\n" +
	"\x05event\x18\x01 \x01(\v2\x1a.eventbus.v1.ProducerEventR\x05event\x12\x1b\n" +
	"\treplay_id\x18\x02 \x01(\fR\breplayId\"\x7f\n" +
	"\rPublishResult\x12\x1b\n" +
	"\treplay_id\x18\x01 \x01(\fR\breplayId\x12(\n" +
	"\x05error\x18\x02 \x01(\v2\x12.eventbus.v1.ErrorR\x05error\x12'\n" +
	"\x0fcorrelation_key\x18\x03 \x01(\tR\x0ecorrelationKey\"E\n" +
	"\x05Error\x12*\n" +
	"\x04code\x18\x01 \x01(\x0e2\x16.eventbus.v1.ErrorCodeR\x04code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\"\xd2\x01\n" +
	"\fFetchRequest\x12\x1d\n" +
	"\n" +
	"topic_name\x18\x01 \x01(\tR\ttopicName\x12>\n" +
	"\rreplay_preset\x18\x02 \x01(\x0e2\x19.eventbus.v1.ReplayPresetR\freplayPreset\x12\x1b\n" +
	"\treplay_id\x18\x03 \x01(\fR\breplayId\x12#\n" +
	"\rnum_requested\x18\x04 \x01(\x05R\fnumRequested\x12!\n" +
	"\fauth_refresh\x18\x05 \x01(\tR\vauthRefresh\"\xb8\x01\n" +
	"\rFetchResponse\x122\n" +
	"\x06events\x18\x01 \x03(\v2\x1a.eventbus.v1.ConsumerEventR\x06events\x12(\n" +
	"\x10latest_replay_id\x18\x02 \x01(\fR\x0elatestReplayId\x12\x15\n" +
	"\x06rpc_id\x18\x03 \x01(\tR\x05rpcId\x122\n" +
	"\x15pending_num_requested\x18\x04 \x01(\x05R\x13pendingNumRequested\",\n" +
	"\rSchemaRequest\x12\x1b\n" +
	"\tschema_id\x18\x01 \x01(\tR\bschemaId\"a\n" +
	"\n" +
	"SchemaInfo\x12\x1f\n" +
	"\vschema_json\x18\x01 \x01(\tR\n" +
	"schemaJson\x12\x1b\n" +
	"\tschema_id\x18\x02 \x01(\tR\bschemaId\x12\x15\n" +
	"\x06rpc_id\x18\x03 \x01(\tR\x05rpcId\"\x86\x01\n" +
	"\x0ePublishRequest\x12\x1d\n" +
	"\n" +
	"topic_name\x18\x01 \x01(\tR\ttopicName\x122\n" +
	"\x06events\x18\x02 \x03(\v2\x1a.eventbus.v1.ProducerEventR\x06events\x12!\n" +
	"\fauth_refresh\x18\x03 \x01(\tR\vauthRefresh\"{\n" +
	"\x0fPublishResponse\x124\n" +
	"\aresults\x18\x01 \x03(\v2\x1a.eventbus.v1.PublishResultR\aresults\x12\x1b\n" +
	"\tschema_id\x18\x02 \x01(\tR\bschemaId\x12\x15\n" +
	"\x06rpc_id\x18\x03 \x01(\tR\x05rpcId\"\x88\x02\n" +
	"\x13ManagedFetchRequest\x12'\n" +
	"\x0fsubscription_id\x18\x01 \x01(\tR\x0esubscriptionId\x12%\n" +
	"\x0edeveloper_name\x18\x02 \x01(\tR\rdeveloperName\x12#\n" +
	"\rnum_requested\x18\x03 \x01(\x05R\fnumRequested\x12!\n" +
	"\fauth_refresh\x18\x04 \x01(\tR\vauthRefresh\x12Y\n" +
	"\x18commit_replay_id_request\x18\x05 \x01(\v2 .eventbus.v1.CommitReplayRequestR\x15commitReplayIdRequest\"\x8b\x02\n" +
	"\x14ManagedFetchResponse\x122\n" +
	"\x06events\x18\x01 \x03(\v2\x1a.eventbus.v1.ConsumerEventR\x06events\x12(\n" +
	"\x10latest_replay_id\x18\x02 \x01(\fR\x0elatestReplayId\x12\x15\n" +
	"\x06rpc_id\x18\x03 \x01(\tR\x05rpcId\x122\n" +
	"\x15pending_num_requested\x18\x04 \x01(\x05R\x13pendingNumRequested\x12J\n" +
	"\x0fcommit_response\x18\x05 \x01(\v2!.eventbus.v1.CommitReplayResponseR\x0ecommitResponse\"^\n" +
	"\x13CommitReplayRequest\x12*\n" +
	"\x11commit_request_id\x18\x01 \x01(\tR\x0fcommitRequestId\x12\x1b\n" +
	"\treplay_id\x18\x02 \x01(\fR\breplayId\"\xac\x01\n" +
	"\x14CommitReplayResponse\x12*\n" +
	"\x11commit_request_id\x18\x01 \x01(\tR\x0fcommitRequestId\x12\x1b\n" +
	"\treplay_id\x18\x02 \x01(\fR\breplayId\x12(\n" +
	"\x05error\x18\x03 \x01(\v2\x12.eventbus.v1.ErrorR\x05error\x12!\n" +
	"\fprocess_time\x18\x04 \x01(\x03R\vprocessTime*1\n" +
	"\tErrorCode\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\v\n" +
	"\aPUBLISH\x10\x01\x12\n" +
	"\n" +
	"\x06COMMIT\x10\x02*4\n" +
	"\fReplayPreset\x12\n" +
	"\n" +
	"\x06LATEST\x10\x00\x12\f\n" +
	"\bEARLIEST\x10\x01\x12\n" +
	"\n" +
	"\x06CUSTOM\x10\x022\xc4\x03\n" +
	"\x06PubSub\x12F\n" +
	"\tSubscribe\x12\x19.eventbus.v1.FetchRequest\x1a\x1a.eventbus.v1.FetchResponse(\x010\x01\x12@\n" +
	"\tGetSchema\x12\x1a.eventbus.v1.SchemaRequest\x1a\x17.eventbus.v1.SchemaInfo\x12=\n" +
	"\bGetTopic\x12\x19.eventbus.v1.TopicRequest\x1a\x16.eventbus.v1.TopicInfo\x12D\n" +
	"\aPublish\x12\x1b.eventbus.v1.PublishRequest\x1a\x1c.eventbus.v1.PublishResponse\x12N\n" +
	"\rPublishStream\x12\x1b.eventbus.v1.PublishRequest\x1a\x1c.eventbus.v1.PublishResponse(\x010\x01\x12[\n" +
	"\x10ManagedSubscribe\x12 .eventbus.v1.ManagedFetchRequest\x1a!.eventbus.v1.ManagedFetchResponse(\x010\x01Ba\n" +
	" com.salesforce.eventbus.protobufB\vPubSubProtoP\x01Z.github.com/developerforce/pub-sub-api/go/protob\x06proto3"

var (
	file_proto_pubsub_api_proto_rawDescOnce sync.Once
	file_proto_pubsub_api_proto_rawDescData []byte
)

func file_proto_pubsub_api_proto_rawDescGZIP() []byte {
	file_proto_pubsub_api_proto_rawDescOnce.Do(func() {
		file_proto_pubsub_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_pubsub_api_proto_rawDesc), len(file_proto_pubsub_api_proto_rawDesc)))
	})
	return file_proto_pubsub_api_proto_rawDescData
}

var file_proto_pubsub_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_pubsub_api_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_proto_pubsub_api_proto_goTypes = []any{
	(ErrorCode)(0),               // 0: eventbus.v1.ErrorCode
	(ReplayPreset)(0),            // 1: eventbus.v1.ReplayPreset
	(*TopicInfo)(nil),            // 2: eventbus.v1.TopicInfo
	(*TopicRequest)(nil),         // 3: eventbus.v1.TopicRequest
	(*EventHeader)(nil),          // 4: eventbus.v1.EventHeader
	(*ProducerEvent)(nil),        // 5: eventbus.v1.ProducerEvent
	(*ConsumerEvent)(nil),        // 6: eventbus.v1.ConsumerEvent
	(*PublishResult)(nil),        // 7: eventbus.v1.PublishResult
	(*Error)(nil),                // 8: eventbus.v1.Error
	(*FetchRequest)(nil),         // 9: eventbus.v1.FetchRequest
	(*FetchResponse)(nil),        // 10: eventbus.v1.FetchResponse
	(*SchemaRequest)(nil),        // 11: eventbus.v1.SchemaRequest
	(*SchemaInfo)(nil),           // 12: eventbus.v1.SchemaInfo
	(*PublishRequest)(nil),       // 13: eventbus.v1.PublishRequest
	(*PublishResponse)(nil),      // 14: eventbus.v1.PublishResponse
	(*ManagedFetchRequest)(nil),  // 15: eventbus.v1.ManagedFetchRequest
	(*ManagedFetchResponse)(nil), // 16: eventbus.v1.ManagedFetchResponse
	(*CommitReplayRequest)(nil),  // 17: eventbus.v1.CommitReplayRequest
	(*CommitReplayResponse)(nil), // 18: eventbus.v1.CommitReplayResponse
}
var file_proto_pubsub_api_proto_depIdxs = []int32{
	4,  // 0: eventbus.v1.ProducerEvent.headers:type_name -> eventbus.v1.EventHeader
	5,  // 1: eventbus.v1.ConsumerEvent.event:type_name -> eventbus.v1.ProducerEvent
	8,  // 2: eventbus.v1.PublishResult.error:type_name -> eventbus.v1.Error
	0,  // 3: eventbus.v1.Error.code:type_name -> eventbus.v1.ErrorCode
	1,  // 4: eventbus.v1.FetchRequest.replay_preset:type_name -> eventbus.v1.ReplayPreset
	6,  // 5: eventbus.v1.FetchResponse.events:type_name -> eventbus.v1.ConsumerEvent
	5,  // 6: eventbus.v1.PublishRequest.events:type_name -> eventbus.v1.ProducerEvent
	7,  // 7: eventbus.v1.PublishResponse.results:type_name -> eventbus.v1.PublishResult
	17, // 8: eventbus.v1.ManagedFetchRequest.commit_replay_id_request:type_name -> eventbus.v1.CommitReplayRequest
	6,  // 9: eventbus.v1.ManagedFetchResponse.events:type_name -> eventbus.v1.ConsumerEvent
	18, // 10: eventbus.v1.ManagedFetchResponse.commit_response:type_name -> eventbus.v1.CommitReplayResponse
	8,  // 11: eventbus.v1.CommitReplayResponse.error:type_name -> eventbus.v1.Error
	9,  // 12: eventbus.v1.PubSub.Subscribe:input_type -> eventbus.v1.FetchRequest
	11, // 13: eventbus.v1.PubSub.GetSchema:input_type -> eventbus.v1.SchemaRequest
	3,  // 14: eventbus.v1.PubSub.GetTopic:input_type -> eventbus.v1.TopicRequest
	13, // 15: eventbus.v1.PubSub.Publish:input_type -> eventbus.v1.PublishRequest
	13, // 16: eventbus.v1.PubSub.PublishStream:input_type -> eventbus.v1.PublishRequest
	15, // 17: eventbus.v1.PubSub.ManagedSubscribe:input_type -> eventbus.v1.ManagedFetchRequest
	10, // 18: eventbus.v1.PubSub.Subscribe:output_type -> eventbus.v1.FetchResponse
	12, // 19: eventbus.v1.PubSub.GetSchema:output_type -> eventbus.v1.SchemaInfo
	2,  // 20: eventbus.v1.PubSub.GetTopic:output_type -> eventbus.v1.TopicInfo
	14, // 21: eventbus.v1.PubSub.Publish:output_type -> eventbus.v1.PublishResponse
	14, // 22: eventbus.v1.PubSub.PublishStream:output_type -> eventbus.v1.PublishResponse
	16, // 23: eventbus.v1.PubSub.ManagedSubscribe:output_type -> eventbus.v1.ManagedFetchResponse
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_proto_pubsub_api_proto_init() }
func file_proto_pubsub_api_proto_init() {
	if File_proto_pubsub_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_pubsub_api_proto_rawDesc), len(file_proto_pubsub_api_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_pubsub_api_proto_goTypes,
		DependencyIndexes: file_proto_pubsub_api_proto_depIdxs,
		EnumInfos:         file_proto_pubsub_api_proto_enumTypes,
		MessageInfos:      file_proto_pubsub_api_proto_msgTypes,
	}.Build()
	File_proto_pubsub_api_proto = out.File
	file_proto_pubsub_api_proto_goTypes = nil
	file_proto_pubsub_api_proto_depIdxs = nil
}
